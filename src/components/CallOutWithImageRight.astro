---
// src/components/CallOutWithImageRightSide.astro
import { Image } from 'astro:assets';
import { client } from '../sanity/client'; // Import Sanity client
import imageUrlBuilder from '@sanity/image-url';
import type { ImageUrlBuilder } from '@sanity/image-url/lib/types/builder';
import OrderButton from './templates/OrderButton.astro';
import LearnMoreLink from './templates/LearnMoreLink.astro';
import HeaderText from './templates/HeaderText.astro';
import BodyText from './templates/BodyText.astro';

const builder = imageUrlBuilder(client);

function urlFor(source: any) {
  return builder.image(source);
}

interface Feature {
    title: string;
    description: string;
    image: {
        asset: {
            _ref: string;
        };
        alt: string;
    }
}

interface CalloutRight {
  title: string;
  description: string;
  image: { asset: { _ref: string }; alt: string } | null;
  features: Feature[];
    orderButton?: { text?: string; href?: string };
    learnMoreLink?: { text?: string; href?: string };
}

const [calloutRightData] = await client.fetch<CalloutRight[]>(`*[_type == "callOutWithImageRight"]`);

  let image: ImageUrlBuilder | undefined;
    if (calloutRightData && calloutRightData.image && calloutRightData.image.asset) {
      image = builder.image(calloutRightData.image).width(600).height(400).fit('max').auto('format');
    }
const { title, description, features, orderButton, learnMoreLink } = calloutRightData || {};
---
<section class="bg-gray-100 py-20">
    <div class="container mx-auto px-4">
      <div class="flex flex-col md:flex-row items-center gap-12">
        <div class="md:w-1/2">

          <HeaderText text={title} color="text-gray-900" />

          <BodyText text={description}/>
          <div class="flex items-center space-x-4">
              {orderButton && (<OrderButton />)}
              {learnMoreLink && (<LearnMoreLink href={learnMoreLink?.href || '#'}>{learnMoreLink?.text}</LearnMoreLink>)}
            </div>
            {features && (
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                {features.map((feature) => (
                    <div class="bg-white rounded-lg shadow-md p-6">
                    <Image src={urlFor(feature.image).width(600).height(400).url()} alt={feature.image.alt} width={600} height={400} class="rounded-lg mb-4" />
                    <h3 class="text-xl font-semibold mb-2">{feature.title}</h3>
                    <p class="text-gray-700">{feature.description}</p>
                    </div>
                ))}
                </div>
            )}
        </div>
        <div class="md:w-1/2">
        {image && (
          <Image
            src={image.url()}
            alt={calloutRightData.image?.alt || ''}
            class="rounded-lg shadow-xl w-full"
            width={600}
            height={400}
          />
        )}
        </div>
      </div>
    </div>
</section>